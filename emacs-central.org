* LMX Base configuration
  The base emacs components will include the following:
  1- Emacs initialization
  2- Package management
  3- Personal information
  4- User Interface settings
  
** LMX Initialization

#+BEGIN_SRC emacs-lisp :tangle init.el
  ;;; init.el -*- lexical-binding: t; -*-

  ;; LMX Base config files section

  (load (concat user-emacs-directory "base/01-bootstrap.el") nil 'nomessage)
  (load (concat user-emacs-directory "base/02-pkgmngr.el") nil 'nomessage)
  (load (concat user-emacs-directory "base/03-personal-info.el") nil 'nomessage)
  (load (concat user-emacs-directory "base/04-lmx-lisp.el") nil 'nomessage)
  (load (concat user-emacs-directory "base/05-modeline-conf.el") nil 'nomessage)
  (load (concat user-emacs-directory "base/06-themes-conf.el") nil 'nomessage)
  (load (concat user-emacs-directory "base/07-ui-conf.el") nil 'nomessage)
  (load (concat user-emacs-directory "base/08-lmx-base-tweaks.el") nil 'nomessage)
  (load (concat user-emacs-directory "base/09-bufmngr-conf.el") nil 'nomessage)
  (load (concat user-emacs-directory "base/10-prjmngr-conf.el") nil 'nomessage)
  (load (concat user-emacs-directory "base/11-ligatures-conf.el") nil 'nomessage)


  ;; LMX Mouules config files section

  (load (concat user-emacs-directory "modules/file-manager/treemacs.el") nil 'nomessage)
  (load (concat user-emacs-directory "modules/completion/complmngr-conf.el") nil 'nomessage)
  (load (concat user-emacs-directory "modules/prog/snippets-conf.el") nil 'nomessage)
  (load (concat user-emacs-directory "modules/checkers/checkers-conf.el") nil 'nomeesage)
  (load (concat user-emacs-directory "modules/prog/prog-conf.el") nil 'nomessage)
  (load (concat user-emacs-directory "modules/lang/webdev-conf.el") nil 'nomessage)
  (load (concat user-emacs-directory "modules/lang/python-conf.el") nil 'nomessage)
  (load (concat user-emacs-directory "modules/lang/php-conf.el") nil 'nomessage)
  (load (concat user-emacs-directory "modules/lang/js-conf.el") nil 'nomessage)
  (load (concat user-emacs-directory "modules/lang/csharp-conf.el") nil 'nomessage)
  (load (concat user-emacs-directory "modules/tools/vc-conf") nil 'nomessage)
  (load (concat user-emacs-directory "modules/tools/org-conf.el") nil 'nomessage)
  (load (concat user-emacs-directory "modules/tools/pdf-conf.el") nil 'nomessage)
  (load (concat user-emacs-directory "modules/tools/evil_mode-conf.el") nil 'nomessage)
  (load (concat user-emacs-directory "modules/tools/treesitter-conf.el") nil 'nomessage)
  (load (concat user-emacs-directory "modules/net/irc-conf.el") nil 'nomessage)


#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle base/01-bootstrap.el
  ;;; 01-bootstrap.el -*- lexical-binding: t; -*-

  ;; Disable garbagge collection at Emacs bootstrap
  (setq gc-cons-threshold most-positive-fixnum)

  ;; Defer listing of installed local emacs packages till Emacs starts.
  (setq package-enable-at-startup nil)
  (advice-add #'package--ensure-init-file :override #'ignore)

  (menu-bar-mode 0)

  (when (fboundp 'tool-bar-mode)
      (tool-bar-mode 0))
  (when (fboundp 'scroll-bar-mode)
      (scroll-bar-mode 0))

  ;; Hide Emacs Startup screen

  (setq inhibit-startup-screen t)
  (setq initial-scratch-message nil)
  (setq initial-major-mode #'fundamental-mode)
  (setq frame-inhibit-implied-resize t)

#+END_SRC

** LMX Package Management

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle base/02-pkgmngr.el
  ;;; 02-pkgmngr.el -*- lexical-binding: t; -*-

  ;; Initialize Straight

  (setq straight-base-dir (concat user-emacs-directory ".local")
	straight-repository-branch "develop"
	straight-cache-autoloads nil
	straight-check-for-modifications nil
	straight-enable-package-integration nil
	straight-vc-git-default-clone-depth 1
	autoload-compute-prefixes nil
	straight-use-package-by-default t)


  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name ".local/straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; Install use-package

  (straight-use-package 'use-package)

  ;; Install Paradox for browsing packages
  (use-package paradox
    :defer t
    :straight t
    :config
    (setq paradox-github-token (concat user-emacs-directory "paradox-token"))
    (paradox-enable))

  ;; Install diminish and delight for use with use-package when needed.
  (use-package diminish
    :straight t
    :defer t)

  (use-package delight
    :straight t
    :defer t)

  ;; Configure Package

  (use-package package
    :defer t
    :config
    (setq package-enable-at-startup nil)
    (setq package-user-dir (concat user-emacs-directory ".local/elpa")
	  package-gnupghome-dir (expand-file-name "gpg" package-user-dir))
    (add-to-list 'package-archives
		 '("gnu" . "https://elpa.gnu.org/packages/") t)
    (add-to-list 'package-archives
		 '("melpa" . "http://melpa.org/packages/") t)
    (add-to-list 'package-archives
		 '("org" . "http://orgmode.org/elpa/") t))

  ;; Install epkg to view packages in Emacsmirror
  (use-package epkg
    :defer t
    :straight t)
#+END_SRC

** Personal Information

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle base/03-personal-info.el
;;; 03-personal-info.el -*- lexical-binding: t; -*-

(setq user-full-name "Hassan Abdin"
      user-mail-address "habdin@gmail.com")

#+END_SRC

** LMX lisp functions

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle base/04-lmx-lisp.el
  ;;; 04-lmx-lisp.el -*- lexical-binding: t; -*-

  (use-package dash-functional
    :straight t)

  (defun fix-doom-modeline (frame)
    "Fix doom modeline to make it show modeline icons when Emacs is started as daemon.
  FRAME is the name of the frame."
    (with-selected-frame frame
      (when (display-graphic-p)
	(setq doom-modeline-icon t))))

  (defun lmx-load-theme (theme)
    "Load downloaded theme."
    (interactive
     (list
      (intern (completing-read "Load custom theme: "
			       (mapcar #'symbol-name
				       (custom-available-themes))))))
    (load-theme theme t))

  ;; The next functions configure fira-code font workaround for proper
  ;; Emacs integration.

  ;; (defun my-correct-symbol-bounds (pretty-alist)
  ;;   "Prepend a TAB character to each symbol in this alist,
  ;; 	      this way compose-region called by prettify-symbols-mode
  ;; 	      will use the correct width of the symbols
  ;; 	      instead of the width measured by char-width."
  ;;   (mapcar (lambda (el)
  ;; 	    (setcdr el (string ?\t (cdr el)))
  ;; 	    el)
  ;; 	  pretty-alist))

  ;; (defun my-ligature-list (ligatures codepoint-start)
  ;;   "Create an alist of strings to replace with
  ;; 	      codepoints starting from codepoint-start."
  ;;   (let ((codepoints (-iterate '1+ codepoint-start (length ligatures))))
  ;;     (-zip-pair ligatures codepoints)))

  ;; (setq my-fira-code-ligatures
  ;;       (let* ((ligs '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\"
  ;; 		     "{-" "[]" "::" ":::" ":=" "!!" "!=" "!==" "-}"
  ;; 		     "--" "---" "-->" "->" "->>" "-<" "-<<" "-~"
  ;; 		     "#{" "#[" "##" "###" "####" "#(" "#?" "#_" "#_("
  ;; 		     ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*"
  ;; 		     "/**" "/=" "/==" "/>" "//" "///" "&&" "||" "||="
  ;; 		     "|=" "|>" "^=" "$>" "++" "+++" "+>" "=:=" "=="
  ;; 		     "===" "==>" "=>" "=>>" "<=" "=<<" "=/=" ">-" ">="
  ;; 		     ">=>" ">>" ">>-" ">>=" ">>>" "<*" "<*>" "<|" "<|>"
  ;; 		     "<$" "<$>" "<!--" "<-" "<--" "<->" "<+" "<+>" "<="
  ;; 		     "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<" "<~"
  ;; 		     "<~~" "</" "</>" "~@" "~-" "~=" "~>" "~~" "~~>" "%%"
  ;; 		     "x" ":" "+" "+" "*")))
  ;; 	(my-correct-symbol-bounds (my-ligature-list ligs #Xe100))))

  ;; (defun my-set-fira-code-ligatures ()
  ;;   (setq prettify-symbols-alist
  ;; 	(append my-fira-code-ligatures prettify-symbols-alist))
  ;;   (prettify-symbols-mode))

  (defun my-check-extension (extension)
    "Check the file extension for the current buffer filename"
    (string= (file-name-extension buffer-file-name) extension))

  (defun my-skewer-enable ()
    "Enables skewer-mode html or css for files with respective file extensions."
    (cond ((my-check-extension "html")
	   (skewer-html-mode 1))
	  ((my-check-extension "css")
	   (skewer-css-mode 1)))
    )
#+END_SRC

** LMX User Interface settings
*** Modeline settings

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle base/05-modeline-conf.el
  ;;; 05-modeline-conf.el -*- lexical-binding: t; -*-

  (use-package doom-modeline
	       :straight t
	       :init (doom-modeline-mode 1)
	       (setq doom-modeline-height 25)
	       (column-number-mode t)
	       :config
	       (if (daemonp)
		   (add-hook 'after-make-frame-functions #'fix-doom-modeline)
		 (doom-modeline-mode 1)))

#+END_SRC

*** Themes

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle base/06-themes-conf.el
  ;;;  06-themes-conf.el -*- lexical-binding: t; -*-

  (use-package doom-themes
    :straight t)

  (use-package all-the-icons
    :straight t
    :defer t)

  (use-package all-the-icons-dired
    :straight t
    :after all-the-icons
    :defer t
    :config
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))


#+END_SRC

*** Global buffer appearance settings

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle base/07-ui-conf.el
  ;;; 07-ui-conf.el -*- lexical-binding: t; -*-

  ;;; Appearance tweaks

  ;; Frame title format
  (setq frame-title-format
	'("" invocation-name " - "
	  (:eval (if (buffer-file-name)
		     (abbreviate-file-name (buffer-file-name))
		   "%b"))))

  ;; Font setting
  (add-hook 'after-make-frame-functions (lambda (frame) (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol")))
  (add-to-list 'default-frame-alist
	       '(font . "Fira Code-11"))
  ;; (add-hook 'after-init-hook 'my-set-fira-code-ligatures)

  ;; Theme settings
  (lmx-load-theme 'doom-acario-dark)

  ;; Hightlight current line
  (global-hl-line-mode)

  ;; Always indicate empty lines within files and buffers
  (setq default-indicate-empty-lines t)
  (when (fboundp 'fringe-mode)
    (set-fringe-mode 4))

#+END_SRC

*** Enhanced base functionality

#+BEGIN_SRC emacs-lisp :mkdirp :tangle base/08-lmx-base-tweaks.el
  ;;; 08-lmx-base-tweaks.el -*- lexical-binding: t; -*-

  ;; Define default Emacs environment settings
  (set-language-environment "utf-8")
  (set-default-coding-systems 'utf-8)

  (setq auto-save-list-file-prefix (concat user-emacs-directory ".local/auto-save/.saves-"))


  ;; Change Default yes-or-no-p to a shorter prompt
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Always reveal the pairing symbol (brackets mainly +/- others)
  (show-paren-mode t)

  ;; Enable entering brackets, quotes, double-quotes and other symbols in pairs
  (electric-pair-mode t)

  ;; Make the Editor aware of disk changes for any file opened within Emacs
  (global-auto-revert-mode 1)

  (use-package recentf
    :config
    (run-at-time nil (* 60 60) 'recentf-save-list)
    (setq recentf-save-file (concat user-emacs-directory ".local/recentf")
	  recentf-max-saved-items 1000
	  recentf-auto-cleanup 'never
	  recentf-exclude '("/ssh:"))
    )


  (use-package whitespace
    :diminish whitespace-mode
    :config
    (setq whitespace-line-column 10000))

  ;; Use `volatile-highlights' to highlight changes from pasting, ...etc.
  (use-package volatile-highlights
    :straight t
    :diminish volatile-highlights-mode
    :defer t
    :config
    (volatile-highlights-mode t))

  ;; rainbow-mode - colourise colours in the buffer
  (use-package rainbow-mode
    :straight t
    :defer t
    )

  ;; rainbow-delimiters - show matching brackets etc
  (use-package rainbow-delimiters
    :straight t
    :defer t
    :config
    (setq global-rainbow-delimiters-mode 1))

  ;; show page breaks
  (use-package page-break-lines
    :straight t
    :diminish page-break-lines-mode
    :defer t
    :config
    (global-page-break-lines-mode 1)
    (setq page-break-lines-modes '(emacs-lisp-mode lisp-mode scheme-mode compilation-mode outline-mode help-mode org-mode ess-mode latex-mode)))


  ;;; Makes Emacs Dashboard the Initial startup screen
  (use-package dashboard
    :straight t
    :init
    (setq dashboard-init-info
	       (if (and (boundp 'straight--profile-cache) (hash-table-p straight--profile-cache))
		   (format "%d packages loaded in %s" (hash-table-size straight--profile-cache) (emacs-init-time))))
    (dashboard-setup-startup-hook)
    :config
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))
	  dashboard-set-heading-icons 1
	  dashboard-set-file-icons 1
	  dashboard-items '((recents . 5)
			    (projects . 5)
			    (bookmarks . 5))
	  dashboard-set-navigator 1
	  dashboard-center-content 1
	  dashboard-navigator-buttons `(;; line1
					((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
					  "Homepage"
					  "Browse homepage"
					  (lambda (&rest _) (browse-url "homepage")))
					 ("★" "Star" "Show stars" (lambda (&rest _) (show-stars)) warning)
					 ("?" "" "?/h" #'show-help nil "<" ">"))
					;; line 2
					((,(all-the-icons-faicon "linkedin" :height 1.1 :v-adjust 0.0)
					  "Linkedin"
					  ""
					  (lambda (&rest _) (browse-url "homepage")))
					 ("⚑" nil "Show flags" (lambda (&rest _) (message "flag")) error)))
	  dashboard-page-separator "\n \n"))

  ;; Garbagge collector Management
  (use-package gcmh
    :straight t
    :config
    (gcmh-mode t))


  ;; Enhanced keybinding user experience
  (use-package which-key
    :straight t
    :defer t
    :init
    (which-key-mode)
    :config
    (setq which-key-popup-type 'side-window
	  which-key-side-window-location 'bottom)
    )

#+END_SRC

*** Buffer Manager settings

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle base/09-bufmngr-conf.el
  ;;; 09-bufmngr-conf.el -*- lexical-binding: t; -*-

  (use-package ace-window
    :straight t
    :bind
    ("M-o" . ace-window))

  (use-package ibuffer
    :bind
    ("C-x C-b" . 'ibuffer))

#+END_SRC

*** Ligature Support
#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle base/11-ligatures-conf.el
  ;; 11-ligatures-conf.el ;; -*- lexical-binding: t; -*- ;;

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Emacs version greater than 27.x running on GUI includes support for harfbuzz to properly   ;;
  ;; show ligatures and other utf-8 characters that can't 'directly' be shown on emacs versions ;;
  ;; earlier than 27.x.									      ;;
  ;; 											      ;;
  ;; Users on emacs greater than 27.x can without any workaround instructions show	      ;;
  ;; ligatures and emojis just by using a font that has these characters defined into it. In    ;;
  ;; order to get the same result on earlier emacs versions, some workaround instructions are   ;;
  ;; present on https://github.com/tonsky/FiraCode/wiki/Emacs-instructions and		      ;;
  ;; https://github.com/microsoft/cascadia-code/issues/153.				      ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


  ;; Workaround instructions for Emacs versions prior to 27.x
  (use-package fira-code-mode
    :defer t
    :straight t
    )

  ;; Enable ligature via the ligature.el melpa package
  (use-package ligature
    :defer t
    :straight (ligature :type git :host github :repo "mickeynp/ligature.el")
    :config
    (ligature-set-ligatures 'prog-mode '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\" "{-" "::"
					 ":::" ":=" "!!" "!=" "!==" "-}" "----" "-->" "->" "->>"
					 "-<" "-<<" "-~" "#{" "#[" "##" "###" "####" "#(" "#?" "#_"
					 "#_(" ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*" "/**"
					 "/=" "/==" "/>" "//" "///" "&&" "||" "||=" "|=" "|>" "^=" "$>"
					 "++" "+++" "+>" "=:=" "==" "===" "==>" "=>" "=>>" "<="
					 "=<<" "=/=" ">-" ">=" ">=>" ">>" ">>-" ">>=" ">>>" "<*"
					 "<*>" "<|" "<|>" "<$" "<$>" "<!--" "<-" "<--" "<->" "<+"
					 "<+>" "<=" "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<"
					 "<~" "<~~" "</" "</>" "~@" "~-" "~>" "~~" "~~>" "%%")))

  (when (window-system)
    (add-hook 'prog-mode-hook
	      (if (featurep 'harfbuzz)
		  #'ligature-mode
		#'fira-code-mode)))
#+END_SRC

** Project Manager settings

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle base/10-prjmngr-conf.el 
  ;;; 10-prjmngr-conf.el -*- lexical-binding: t; -*-

  (use-package projectile
    :straight t
    :config
    (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (setq projectile-project-search-path '("~/Projects/"))
    (setq projectile-completion-system 'ivy)
    (setq projectile-mode-line-prefix " Project ")
    (projectile-mode +1))
#+END_SRC

* LMX Modules configuration
** File Manager settings

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle modules/file-manager/treemacs.el
  ;;; treemacs.el -*- lexical-binding: t; -*-

  (use-package treemacs
    :straight t
    :defer t
    :config
    (progn
      (setq treemacs-collapse-dirs (if treemacs-python-executable 3 0)
	    treemacs-deferred-git-apply-delay 0.5
	    treemacs-directory-name-transformer #'identity
	    treemacs-display-in-side-window t
	    treemacs-eldoc-display t
	    treemacs-file-event-delay 5000
	    treemacs-follow-after-init t
	    treemacs-git-command-pipe ""
	    treemacs-goto-tag-strategy 'refetch-index
	    treemacs-indentation 2
	    treemacs-indentation-string " "
	    treemacs-is-never-other-window nil
	    treemacs-max-git-entries 5000
	    treemacs-missing-project-action 'ask
	    treemacs-move-forward-on-expand nil
	    treemacs-no-png-images nil
	    treemacs-no-delete-other-windows t
	    treemacs-project-follow-cleanup nil
	    treemacs-persist-file (expand-file-name ".local/cache/treemacs-persist")
	    treemacs-position 'left
	    treemacs-recenter-distance 0.1
	    treemacs-recenter-after-file-follow nil
	    treemacs-recenter-after-tag-follow nil
	    treemacs-recenter-after-project-jump 'always
	    treemacs-recenter-after-project-expand 'on-distance
	    treemacs-show-hidden-files nil
	    treemacs-show-cursor nil
	    treemacs-silent-filewatch nil
	    treemacs-silent-refresh nil
	    treemacs-space-between-root-nodes t
	    treemacs-tag-follow-cleanup t
	    treemacs-tag-follow-delay 1.5
	    treemacs-user-mode-line-format nil
	    treemacs-user-header-line-format nil
	    treemacs-width 30
	    treemacs-workspace-switch-cleanup nil)
      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
		   (not (null treemacs-python-executable)))
	(`(t . t)
	 (treemacs-git-mode 'deferred))
	(`(t . _)
	 (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
	  ("C-<f3>" . treemacs)
	  ("M-0" . treemacs-select-window))
    )

  (use-package treemacs-projectile
    :after treemacs projectile
    :straight t)

  (use-package treemacs-magit
    :after treemacs magit
    :straight t)

  (use-package treemacs-persp
    :after treemacs perspective
    :straight t
    :config
    (treemacs-set-scope-type 'Perspectives))
#+END_SRC

** Auto Completion settings

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle modules/completion/complmngr-conf.el
  ;;; complmngr-conf.el -*- lexical-binding: t; -*-

  (use-package ivy
    :straight t
    :defer t
    :config
    (setq ivy-use-virtual-buffers t
	  ivy-count-format "[%d/%d] "
	  ivy-height 20)
    :init
    (ivy-mode 1)
    :bind
    (
     ("C-s" . 'swiper-isearch)
     ("C-r" . 'swiper-isearch-backward)
     ("M-x" . 'counsel-M-x)
     ("C-x C-f" . 'counsel-find-file)
     ("M-y" . 'counsel-yank-pop)
     ("<F1>-f" . 'counsel-describe-function)
     ("<F1>-v" . 'counsel-describe-variable)
     ("<F1>-l" . 'counsel-find-library)
     ("<F2>-i" . 'counsel-info-lookup-symbol)
     ("<F2>-u" . 'counsel-unicode-char)
     ("<F2>-j" . 'counsel-set-variable)
     ("C-x b" . 'ivy-switch-buffer)
     ("C-c v" . 'ivy-push-view)
     ("C-c V" . 'ivy-pop-view)
     ))

  (use-package ivy-posframe
    :straight t
    :after ivy
    :config
    (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-bottom-window-center)))
    (ivy-posframe-mode t))

  (use-package ivy-hydra)

  (use-package ivy-rich
    :straight t
    :defer t
    :after ivy counsel
    :init
    (ivy-rich-mode))

  (use-package all-the-icons-ivy-rich
    :straight t
    :defer t
    :after ivy ivy-rich counsel
    :init (all-the-icons-ivy-rich-mode)
    :config
    (setq all-the-icons-ivy-rich-icon-size 1.5))

  (use-package counsel
    :straight t
    :defer t)

  (use-package counsel-projectile
    :straight t
    :after projectile counsel)

  (use-package counsel-pydoc)


  ;; Use `company-mode' for in-buffer autocompletion. Company Mode has many backends.
  ;; These will be configured in here as well.

  (use-package company
    :straight t
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    :init
    (setq company-idle-delay 0.1
	  company-minimum-prefix-length 2
	  company-tooltip-align-annotations t
	  company-global-modes '(not help-mode gud-mode message-mode erc-mode))

    :bind
    ("M-C-i" . 'company-complete))

  (use-package company-web
    :straight t
    )

  (use-package company-box
    :straight t
    :hook (company-mode . company-box-mode)
    :config
    (setq company-box-icons-alist 'company-box-icons-all-the-icons))

  (use-package company-jedi
    :straight t
    :after company elpy
    :config
    (add-to-list 'company-backends 'company-jedi))

#+END_SRC

** Checkers system

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle modules/checkers/checkers-conf.el
  ;;; checkers-conf -*- lexical-binding: t; -*-

  (use-package flycheck
    :straight t
    )


  (use-package flyspell
    :straight t
    )
    
#+END_SRC

** Programming
   
*** General Programming Support

 #+BEGIN_SRC emacs-lisp :mkdirp yes :tangle modules/prog/prog-conf.el
   ;;; prog-conf.el -*- lexical-binding: t; -*-

   ;; (dolist (attach '(my-set-fira-code-ligatures display-line-numbers-mode))
   ;;  (add-hook 'prog-mode-hook attach))

   (setq display-line-numbers-type 'relative)
   (add-hook 'prog-mode-hook
	     (if (fboundp 'display-line-numbers-mode)
		 #'display-line-numbers-mode
	     #'linum-mode))

 #+END_SRC

*** Snippets system

 #+BEGIN_SRC emacs-lisp :mkdirp yes :tangle modules/prog/snippets-conf.el
   ;;; snippets-conf.el -*- lexical-binding: t; -*-

   (use-package yasnippet
     :straight t
     :defer t
     :config
     (add-hook 'after-init-hook #'yas-reload-all)
     :init
     (yas-global-mode t)
     )

   (use-package yasnippet-snippets
     :straight t
     :after yasnippet)



 #+END_SRC

*** Programming language Support
**** Python support

  #+BEGIN_SRC emacs-lisp :mkdirp yes :tangle modules/lang/python-conf.el
    ;;; python-conf -*- lexical-binding: t; -*-

    (use-package elpy
      :straight t
      :defer t
      :init
      (advice-add 'python-mode :before #'elpy-enable)
      :config
      (when (require 'flycheck nil t)
	(setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
	))

    (use-package pyvenv
      :straight t
      :defer t
      :config
      (advice-add 'python-mode :before #'pyvenv-mode))

    (use-package py-autopep8
      :config
      (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save))

    (use-package ein
      :config
      (setq python-shell-interpreter "ipython"
	    python-shell-interpreter-arg "-i --simple-prompt"))
  #+END_SRC

**** HTML/CSS support

  #+BEGIN_SRC emacs-lisp :mkdirp yes :tangle modules/lang/webdev-conf.el
    ;;; webdev-conf.el -*- lexical-binding: t; -*-

      (use-package web-mode
	:straight t
	:init
	(setq web-mode-enable-current-element-highlight t
	      web-mode-enable-current-column-highlight t)
	:mode
	(("\\.phtml\\'" . web-mode)
	 ("\\.cshtml\\'" . web-mode)
	 ("\\.tpl\\.php\\'" . web-mode)
	 ("\\.[agj]sp\\'" . web-mode)
	 ("\\.as[cp]x\\'" . web-mode)
	 ("\\.erb\\'" . web-mode)
	 ("\\.mustache\\'" . web-mode)
	 ("\\.djhtml\\'" . web-mode)
	 ("\\.html?\\'" . web-mode)
	 ("\\.css\\'" . web-mode))

	:config
	(setq  web-mode-markup-indent-offset 2
	       web-mode-css-indent-offset 2
	       web-mode-code-indent-offset 2
	       web-mode-style-padding 1
	       web-mode-script-padding 1
	       web-mode-block-padding 0
	       web-mode-enable-auto-pairing t
	       web-mode-enable-css-colorization t
	       web-mode-enable-part-face t
	       web-mode-comment-keywords t
	       web-mode-enable-heredoc-fontification t)
	(set-face-attribute 'web-mode-css-at-rule-face nil :foreground "Pink3")
	(add-to-list 'company-backends '(company-css company-web-html))
	)

      ;; Configure Emmet-mode and attach it to Web-mode.

      (use-package emmet-mode
	:straight t
	:config
	(setq emmet-self-closing-tag-style "")
	:hook (web-mode))


      ;; Configure Skewer-mode

      (use-package skewer-mode
	:straight t
	:init
	(add-hook 'web-mode-hook 'my-skewer-enable)
	:hook
	(web-mode))

      (use-package impatient-mode
	:straight t
	:hook
	(web-mode))

      (use-package lorem-ipsum)
  #+END_SRC

**** Javascript Support

     #+BEGIN_SRC emacs-lisp :mkdirp yes :tangle modules/lang/js-conf.el
       ;; js-conf.el -*- lexical-binding: t; -*-

       ;; Install js2-mode for better javascript editing

       (use-package js2-mode
	 :straight t
	 :defer t
	 :interpreter "node"
	 :mode
	 (("\\.js\\'" . js2-mode))
	 )

       (use-package xref-js2
	 :straight t
	 :after js2-mode
	 :defer t
	 :config
	 (add-hook 'js2-mode-hook (lambda ()
				    (add-hook 'xref-backend-functions #'xref-js2-xref-backend))))

       (use-package js2-refactor
	 :straight t
	 :defer t
	 :after js2-mode
	 :config
	 (add-hook 'js2-mode-hook js2-refactor-mode))

       (use-package tide
	 :straight t
	 :after (company flycheck company-tide)
	 :hook
	 ((js2-mode . tide-setup)
	  (js2-mode . tide-hl-identifier-mode)
	  (before-save . tide-format-before-save))
	 :config
	 (add-to-list 'company-backends 'company-tide)
	 )

 #+END_SRC

**** PHP Support 

  #+BEGIN_SRC emacs-lisp :mkdirp yes :tangle modules/lang/php-conf.el
    ;; php-conf.el -*- lexical-binding: t; -*-

    ;; Install php-mode

    (use-package php-mode
      :straight t
      :defer t
      :mode
      (("\\.php\\'" . php-mode))
      :config
      (add-hook 'php-mode-hook (lambda ()
				(add-to-list 'company-backends 'company-ac-php-backend))))

    ;; Auto-completion support

    (use-package company-php
      :straight t
      :defer t
      )
  #+END_SRC
    
**** Csharp Support
 #+BEGIN_SRC emacs-lisp :mkdirp yes :tangle modules/lang/csharp-conf.el
   ;; csharp-conf.el -*- lexical-binding: t; -*-

   (use-package csharp-mode
     :straight t
     :defer t
     :config
     (add-hook 'csharp-mode-hook 'flycheck-mode))

   (use-package csproj-mode
     :straight t
     :defer t)

   (use-package omnisharp
     :straight t
     :defer t
     :hook ((csharp-mode . omnisharp-mode))
     :config
     (add-to-list 'company-backends 'company-omnisharp))



 #+END_SRC
 
** Tools
   
*** Version control

  #+BEGIN_SRC emacs-lisp :mkdirp yes :tangle modules/tools/vc-conf.el
    ;; vc-conf.el -*- lexical-binding: t; -*-

    (use-package magit
      :straight t)

    (use-package magit-gh-pulls
      :straight t
      :defer t
      :config
      (add-hook 'magit-mode-hook 'turn-on-magit-gh-pulls))

    (use-package magit-gitflow
      :straight t)

    (use-package magit-imerge
      :straight t)

    (use-package magithub
      :straight t)

    (use-package diff-hl
      :straight t
      :defer t
      :config
      (global-diff-hl-mode))

  #+END_SRC

*** Org mode extended support

 #+BEGIN_SRC emacs-lisp :mkdirp yes :tangle modules/tools/org-conf.el
   ;;; org-conf.el -*- lexical-binding: t; -*-
   
   (use-package org
     :straight t
     :defer t
     :config
     (setq org-directory "~/Documents/Organize/"
	   org-agenda-files (concat org-directory "agenda.org")
	   org-hide-emphasis-markers t)
     (font-lock-add-keywords 'org-mode
			     '(("^ *\\([-]\\) "
				(0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
     (let* ((variable-tuple
	     (when (display-graphic-p)
		 (cond
		  ((x-list-fonts "Fira Code") '(:font "Fira Code"))
		  ((x-list-fonts "Iosveka") '(:font "Iosveka"))
		  ((x-list-fonts "Verdana") '(:font "Verdana"))
		  ((x-family-fonts "Sans Serif") '(:family "Sans Serif"))
		  (nil (warn "Can't find a Sans Serif Font. Please install Source Sans Pro.")))))
	    (base-font-color (face-foreground 'default nil 'default))
	    (headline `(:inherit default :weight bold :foreground ,base-font-color)))
       (custom-theme-set-faces
	'user
	`(org-level-8 ((t (,@headline ,@variable-tuple))))
	`(org-level-7 ((t (,@headline ,@variable-tuple))))
	`(org-level-6 ((t (,@headline ,@variable-tuple))))
	`(org-level-5 ((t (,@headline ,@variable-tuple))))
	`(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
	`(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
	`(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
	`(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
	`(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))
	))
     (with-eval-after-load "ox-latex"
       (add-to-list 'org-latex-classes
		    '("koma-book" "\\documentclass{scrbook}"
		      ("\\part{%s}" . "\\part*{%s}")
		      ("\\chapter{%s}" . "\\chapter*{%s}")
		      ("\\section{%s}" . "\\section*{%s}")
		      ("\\subsection{%s}" . "\\subsection*{%s}")
		      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		      ("\\paragraph{%s}" . "\\paragraph*{%s}")
		      ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
     )
   (use-package org-contrib
     :straight t
     :after org)
   
   (use-package org-bullets
     :straight t
     :config
     (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
 #+END_SRC

*** PDF support

 #+BEGIN_SRC emacs-lisp :mkdirp yes :tangle modules/tools/pdf-conf.el
   ;; pdf-conf.el -*- lexical-binding: t; -*-

   (use-package pdf-tools
     :straight t
     :defer t
     :magic ("%PDF" . pdf-occur-global-minor-mode)
     :config
     (pdf-tools-install))
 #+END_SRC
*** Tree-sitter support

 #+begin_src emacs-lisp :mkdirp yes :tangle modules/tools/treesitter-conf.el
   ;; treesitter-conf.el -*- lexical-binding: t; -*-

   (use-package tree-sitter
     :straight t
     :hook (prog-mode . tree-sitter-mode)
     :config
     (add-hook 'tree-sitter-mode-hook #'tree-sitter-hl-mode)
     )

   (use-package tree-sitter-langs
     :straight t
     :after tree-sitter
     )

   (use-package tree-sitter-indent
     :straight t
     :after tree-sitter
     )

 #+end_src
 
*** Evil mode support

#+begin_src emacs-lisp :mkdirp yes :tangle modules/tools/evil_mode-conf.el
  ;; evil_mode-conf.el -*- lexical-binding: t; -*-

  (use-package evil
    :straight t
    :config
    (evil-mode 1)
    )

#+end_src

** IRC settings

#+BEGIN_SRC emacs-lisp :mkdirp yes :tangle modules/net/irc-conf.el
  ;;; irc-conf.el -*- lexical-binding: t; -*-
  
  (use-package erc
    :defer t
    :config
    ;; Set user information
    (setq erc-nick "Lordveda")
    (setq erc-user-full-name "Hassan Abdin")
    ;; Load user password file
    (load (concat user-emacs-directory "modules/net/irc-auth.el")))
  
  ;; Add `erc-colorize' extension
  (use-package erc-colorize
    :straight t
    :defer t
    :config
    (erc-colorize-mode 1))
  
  (use-package erc-sasl
    :defer t
    :straight (erc-sasl :type git :host github :repo "suhailshergill/erc-sasl")
    :config
    (add-to-list 'erc-sasl-server-regexp-list ".*"))
  
  (use-package rcirc
    :defer t
    :config
    (add-to-list 'rcirc-server-alist
		 '("irc.freenode.net"
		   :channels ("#emacs")))
    (setq rcirc-default-nick "Lordveda"
	  rcirc-default-full-name "Hassan Abdin")
    (load (concat user-emacs-directory "modules/net/irc-auth.el"))
    )
#+END_SRC

